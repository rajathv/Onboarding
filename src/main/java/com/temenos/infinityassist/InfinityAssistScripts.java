package com.temenos.infinityassist;

/**
 * This class was automatically generated by the data modeler tool.
 */

public class InfinityAssistScripts implements java.io.Serializable {

	static final long serialVersionUID = 1L;

	public InfinityAssistScripts() {
	}

	public static void setErrorVariables(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		kcontext.setVariable("application", "Corporate");
		java.util.Map<String, Object> requestMap = new java.util.HashMap<String, Object>();
		if (kcontext.getVariable("AdditionalParameters") != null) {
			requestMap = (java.util.Map<String, Object>) kcontext
					.getVariable("AdditionalParameters");
		}
		// Request ID
		if (kcontext.getVariable("RequestId") != null) {
			kcontext.setVariable("requestId", kcontext.getVariable("RequestId")
					.toString());
		} else if (requestMap.get("requestId") != null) {
			kcontext.setVariable("requestId", requestMap.get("requestId")
					.toString());
		}

		// Facility ID
		if (kcontext.getVariable("FacilityId") != null) {
			kcontext.setVariable("facilityId",
					kcontext.getVariable("FacilityId").toString());
		} else if (requestMap.get("facilityId") != null) {
			kcontext.setVariable("facilityId", requestMap.get("facilityId")
					.toString());
		}

		// Party ID
		if (kcontext.getVariable("PartyId") != null) {
			kcontext.setVariable("partyId", kcontext.getVariable("PartyId")
					.toString());
		} else if (requestMap.get("partyId") != null) {
			kcontext.setVariable("partyId", requestMap.get("partyId")
					.toString());
		}
	}

	public static void setDocumentListForReference(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			String docResponse = (String) kcontext
					.getVariable("requestResponse");
			String partyId = (String) kcontext.getVariable("partyId");
			org.json.JSONObject responseJSON = new org.json.JSONObject(
					docResponse);
			org.json.JSONArray documentArray = new org.json.JSONArray(
					responseJSON.getString("documentsList"));
			java.util.List<java.util.HashMap<String, Object>> documentList = new java.util.ArrayList<java.util.HashMap<String, Object>>();
			for (int i = 0; i < documentArray.length(); i++) {
				org.json.JSONObject documentObj = new org.json.JSONObject(
						documentArray.get(i).toString());
				java.util.HashMap<String, Object> documentData = new java.util.HashMap<String, Object>();
				// documentData.put("fileInfo", documentObj.opt("fileInfo"));
				documentData.put("documentId", documentObj.get("documentId"));
				documentData.put("documentType",
						documentObj.opt("documentType"));
				documentData.put("documentStatus",
						documentObj.opt("documentStatus"));
				documentData.put("metaDocumentName",
						documentObj.opt("metaDocumentName"));
				documentData.put("category", documentObj.opt("category"));
				documentData.put("referenceId", partyId);
				documentList.add(documentData);
			}
			kcontext.setVariable("documentsList", documentList);
		} catch (Exception e) {
		}
	}

}