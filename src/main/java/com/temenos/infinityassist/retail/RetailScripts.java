package com.temenos.infinityassist.retail;

/**
 * This class was automatically generated by the data modeler tool.
 */

public class RetailScripts implements java.io.Serializable {

	static final long serialVersionUID = 1L;

	public RetailScripts() {
	}

	public static void setRequestId(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			String response = (String) kcontext.getVariable("response");
			org.json.JSONObject responseJSON = new org.json.JSONObject(response);
			kcontext.setVariable("requestId",
					responseJSON.getString("requestId"));
		} catch (Exception e) {

		}
	}

	public static void setParties(
			org.kie.api.runtime.process.ProcessContext kcontext,
			String relatedPartiesResponse) {
		try {
			org.json.JSONObject relatedParties = new org.json.JSONObject(
					relatedPartiesResponse);
			org.json.JSONArray relatedPartiesArray = relatedParties
					.getJSONArray("relatedParties");
			java.util.Set<String> prospectParties = new java.util.HashSet<>();
			java.util.Set<String> existingParties = new java.util.HashSet<>();
			for (int index = 0; index < relatedPartiesArray.length(); index++) {
				org.json.JSONObject party = relatedPartiesArray
						.getJSONObject(index);
				String partyId = party.getString("relatedPartyId");
				if (partyId.startsWith("NNVF")) {
					prospectParties.add(partyId);
				} else if (partyId.startsWith("ENVF")) {
					existingParties.add(partyId);
				}
			}
			kcontext.setVariable("prospectParties", prospectParties);
			kcontext.setVariable("existingParties", existingParties);
		} catch (Exception e) {

		}
	}

	public static void setUnderReviewFacilities(
			org.kie.api.runtime.process.ProcessContext kcontext,
			String facilitiesResponse) {
		try {
			org.json.JSONObject responseJSON = new org.json.JSONObject(
					facilitiesResponse);
			org.json.JSONArray facilitiesArray = new org.json.JSONArray(
					responseJSON.get("facilities").toString());
			java.util.List<String> facilityList = new java.util.ArrayList<String>();
			for (int i = 0; i < facilitiesArray.length(); i++) {
				org.json.JSONObject facilityObj = new org.json.JSONObject(
						facilitiesArray.get(i).toString());
				if (facilityObj.get("approvalStatusId").toString().equals("03")) {
					facilityList.add(facilityObj.get("facilityId").toString());
				}
			}
			kcontext.setVariable("facilitiesList", facilityList);
		} catch (Exception e) {

		}
	}

	public static void setApprovedFacilities(
			org.kie.api.runtime.process.ProcessContext kcontext,
			String facilitiesResponse) {
		try {
			org.json.JSONObject responseJSON = new org.json.JSONObject(
					facilitiesResponse);
			org.json.JSONArray facilitiesArray = new org.json.JSONArray(
					responseJSON.get("facilities").toString());
			java.util.List<String> facilityList = new java.util.ArrayList<String>();
			for (int i = 0; i < facilitiesArray.length(); i++) {
				org.json.JSONObject facilityObj = new org.json.JSONObject(
						facilitiesArray.get(i).toString());
				if (facilityObj.get("approvalStatusId").toString().equals("01")) {
					facilityList.add(facilityObj.get("facilityId").toString());
				}
			}
			kcontext.setVariable("facilitiesList", facilityList);
		} catch (Exception e) {

		}
	}

	public static void checkCreditDecision(
			org.kie.api.runtime.process.ProcessContext kcontext,
			String decisionResponse) {
		try {
			org.json.JSONObject creditDecisions = new org.json.JSONObject(
					decisionResponse);
			if (creditDecisions.has("decisions")) {
				org.json.JSONArray decisionsArray = creditDecisions
						.getJSONArray("decisions");
				String facilityId = kcontext.getVariable("facilityId")
						.toString();
				for (int index = 0; index < decisionsArray.length(); index++) {
					org.json.JSONObject decision = decisionsArray
							.getJSONObject(index);
					if (decision.get("facilityId").toString()
							.equals(facilityId)
							&& decision.get("finalDecision").toString()
									.equals("true")
							&& (decision.get("decisionId").equals("02") || decision
									.get("decisionId").equals("03"))) {
						kcontext.setVariable("hasDecision", true);
						if (decision.get("decisionId").equals("02"))
							kcontext.setVariable("approvalStatusId", "01");
						else if (decision.get("decisionId").equals("03"))
							kcontext.setVariable("approvalStatusId", "02");
						break;
					} else {
						kcontext.setVariable("hasDecision", false);
					}
				}
			} else {
				kcontext.setVariable("hasDecision", false);
			}
		} catch (Exception e) {

		}
	}

	public static void setProductLineId(
			org.kie.api.runtime.process.ProcessContext kcontext,
			String facilityResponse) {
		try {
			org.json.JSONObject responseJSON = new org.json.JSONObject(
					facilityResponse);
			kcontext.setVariable("productLineId",
					responseJSON.getString("productLineId"));
		} catch (Exception e) {

		}
	}

	public static void setCoreReferenceMap(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			org.json.JSONObject accountResponse = new org.json.JSONObject(
					kcontext.getVariable("accountResponse").toString());
			String accountId = accountResponse.getString("accountID");
			String effectiveDate = accountResponse.optString("effectiveDate");
			java.util.Map<String, String> coreReference = new java.util.HashMap<String, String>();
			coreReference.put("id", accountId);
			coreReference.put("type", "ACCOUNT");
			kcontext.setVariable("coreReference", coreReference);
			if (effectiveDate != null && effectiveDate.length() != 0) {
				kcontext.setVariable("startDate", effectiveDate);
			}
		} catch (Exception e) {

		}
	}

	public static void setCoreReferenceMapForCard(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			org.json.JSONObject accountResponse = new org.json.JSONObject(
					kcontext.getVariable("accountResponse").toString());
			String cardNumber = accountResponse.getString("cardNumber");
			String effectiveDate = accountResponse.optString("effectiveDate");
			java.util.Map<String, String> coreReference = new java.util.HashMap<String, String>();
			coreReference.put("id", cardNumber);
			coreReference.put("type", "Card");
			kcontext.setVariable("coreReference", coreReference);
			if (effectiveDate != null && effectiveDate.length() != 0) {
				kcontext.setVariable("startDate", effectiveDate);
			}
		} catch (Exception e) {

		}
	}

	public static void setPartiesByApplicantType(
			org.kie.api.runtime.process.ProcessContext kcontext,
			String relatedPartiesResponse) {
		try {
			org.json.JSONObject relatedParties = new org.json.JSONObject(
					relatedPartiesResponse);
			org.json.JSONArray relatedPartiesArray = relatedParties
					.getJSONArray("relatedParties");
			String applicantPartyId = "";
			java.util.Set<String> coApplicantPartyIds = new java.util.HashSet<>();
			for (int index = 0; index < relatedPartiesArray.length(); index++) {
				org.json.JSONObject party = relatedPartiesArray
						.getJSONObject(index);
				String partyId = party.getString("relatedPartyId");
				String partyRole = party.getString("relatedPartyRole");
				if (partyRole.equals("01")) {
					applicantPartyId = partyId;
				} else {
					coApplicantPartyIds.add(partyId);
				}
			}
			kcontext.setVariable("applicantPartyId", applicantPartyId);
			kcontext.setVariable("coApplicantPartyIds", coApplicantPartyIds);
			java.util.Set<String> allPartyIds = new java.util.HashSet<>();
			allPartyIds.add(applicantPartyId);
			allPartyIds.addAll(coApplicantPartyIds);
			kcontext.setVariable("partyIds", allPartyIds);
		} catch (Exception e) {

		}
	}

	public static void setTransactionId(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			String response = (String) kcontext.getVariable("receiptResponse");
			org.json.JSONObject responseJSON = new org.json.JSONObject(response);
			kcontext.setVariable("transactionId",
					responseJSON.getString("transactionId"));
		} catch (Exception e) {

		}
	}

}