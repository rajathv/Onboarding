package com.myspace.corporatelos.closing;

/**
 * This class was automatically generated by the data modeler tool.
 */

public class ClosingScripts implements java.io.Serializable {

	static final long serialVersionUID = 1L;

	public ClosingScripts() {
	}

	public static void checkConditions(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			org.json.JSONObject conditionResp = new org.json.JSONObject(
					kcontext.getVariable("response").toString());
			if (conditionResp.has("decisions")) {
				org.json.JSONArray decisionArray = conditionResp
						.getJSONArray("decisions");
				if (decisionArray.length() > 0) {
					for (int i = 0; i < decisionArray.length(); i++) {
						org.json.JSONObject conditionObject = new org.json.JSONObject(
								decisionArray.get(i).toString());
						org.json.JSONArray conditionArray = conditionObject
								.getJSONArray("conditions");
						if (conditionArray.length() > 0) {
							for (int j = 0; j < conditionArray.length(); j++) {
								org.json.JSONObject indEle = new org.json.JSONObject(
										conditionArray.get(j).toString());
								if (!indEle.isNull("conditionStatus")
										&& (!indEle.get("conditionStatus")
												.equals("01"))) {
									kcontext.setVariable("result", true);
									break;
								} else {
									kcontext.setVariable("result", false);
								}

							}
						} else {
							kcontext.setVariable("result", true);
						}
					}
				} else {
					kcontext.setVariable("result", true);
				}
			} else {
				kcontext.setVariable("result", true);
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void checkMonitorCompliance(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			org.json.JSONObject complianceResp = new org.json.JSONObject(
					kcontext.getVariable("response").toString());
			if (complianceResp.has("compliances")) {
				org.json.JSONArray compArray = complianceResp
						.getJSONArray("compliances");
				if (compArray.length() > 0) {
					for (int i = 0; i < compArray.length(); i++) {
						org.json.JSONObject indEle = new org.json.JSONObject(
								compArray.get(i).toString());
						if (!indEle.isNull("status")
								&& (indEle.get("status").equals("01") || indEle
										.get("status").equals("02"))) {
							kcontext.setVariable("result", true);
							break;
						} else {
							kcontext.setVariable("result", false);
						}

					}
				} else {
					kcontext.setVariable("result", true);
				}
			} else {
				kcontext.setVariable("result", true);
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void checkFunding(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		System.out.println("response: "
				+ kcontext.getVariable("response").toString());
		try {
			org.json.JSONObject responseObj = new org.json.JSONObject(kcontext
					.getVariable("response").toString());
			org.json.JSONArray fundingArray = responseObj
					.getJSONArray("funding");
			if (fundingArray.length() > 0)
				kcontext.setVariable("result", "Approved");
			else
				kcontext.setVariable("result", "Rejected");
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

}